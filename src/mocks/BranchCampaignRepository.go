// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import (
	dto "lucio.com/order-service/src/domain/dto"
	entities "lucio.com/order-service/src/domain/entities"

	mock "github.com/stretchr/testify/mock"
)

// BranchCampaignRepository is an autogenerated mock type for the BranchCampaignRepository type
type BranchCampaignRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: branchCampaign
func (_m *BranchCampaignRepository) Create(branchCampaign entities.BranchCampaign) (*entities.BranchCampaign, error) {
	ret := _m.Called(branchCampaign)

	var r0 *entities.BranchCampaign
	var r1 error
	if rf, ok := ret.Get(0).(func(entities.BranchCampaign) (*entities.BranchCampaign, error)); ok {
		return rf(branchCampaign)
	}
	if rf, ok := ret.Get(0).(func(entities.BranchCampaign) *entities.BranchCampaign); ok {
		r0 = rf(branchCampaign)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.BranchCampaign)
		}
	}

	if rf, ok := ret.Get(1).(func(entities.BranchCampaign) error); ok {
		r1 = rf(branchCampaign)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByBranchID provides a mock function with given fields: branchID
func (_m *BranchCampaignRepository) FindByBranchID(branchID uint) []dto.BranchCampaignReportDTO {
	ret := _m.Called(branchID)

	var r0 []dto.BranchCampaignReportDTO
	if rf, ok := ret.Get(0).(func(uint) []dto.BranchCampaignReportDTO); ok {
		r0 = rf(branchID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.BranchCampaignReportDTO)
		}
	}

	return r0
}

// FindByID provides a mock function with given fields: ID
func (_m *BranchCampaignRepository) FindByID(ID uint) *entities.BranchCampaign {
	ret := _m.Called(ID)

	var r0 *entities.BranchCampaign
	if rf, ok := ret.Get(0).(func(uint) *entities.BranchCampaign); ok {
		r0 = rf(ID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.BranchCampaign)
		}
	}

	return r0
}

// GetActivesByBranchID provides a mock function with given fields: branchID
func (_m *BranchCampaignRepository) GetActivesByBranchID(branchID uint) []dto.BranchCampaignCreatedDTO {
	ret := _m.Called(branchID)

	var r0 []dto.BranchCampaignCreatedDTO
	if rf, ok := ret.Get(0).(func(uint) []dto.BranchCampaignCreatedDTO); ok {
		r0 = rf(branchID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.BranchCampaignCreatedDTO)
		}
	}

	return r0
}

// NewBranchCampaignRepository creates a new instance of BranchCampaignRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBranchCampaignRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *BranchCampaignRepository {
	mock := &BranchCampaignRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
