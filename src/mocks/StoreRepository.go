// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	entities "lucio.com/order-service/src/domain/entities"
)

// StoreRepository is an autogenerated mock type for the StoreRepository type
type StoreRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: store
func (_m *StoreRepository) Create(store entities.Store) (*entities.Store, error) {
	ret := _m.Called(store)

	var r0 *entities.Store
	var r1 error
	if rf, ok := ret.Get(0).(func(entities.Store) (*entities.Store, error)); ok {
		return rf(store)
	}
	if rf, ok := ret.Get(0).(func(entities.Store) *entities.Store); ok {
		r0 = rf(store)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Store)
		}
	}

	if rf, ok := ret.Get(1).(func(entities.Store) error); ok {
		r1 = rf(store)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByBranchID provides a mock function with given fields: branchID
func (_m *StoreRepository) FindByBranchID(branchID uint) *entities.Store {
	ret := _m.Called(branchID)

	var r0 *entities.Store
	if rf, ok := ret.Get(0).(func(uint) *entities.Store); ok {
		r0 = rf(branchID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Store)
		}
	}

	return r0
}

// FindByID provides a mock function with given fields: ID
func (_m *StoreRepository) FindByID(ID uint) *entities.Store {
	ret := _m.Called(ID)

	var r0 *entities.Store
	if rf, ok := ret.Get(0).(func(uint) *entities.Store); ok {
		r0 = rf(ID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Store)
		}
	}

	return r0
}

// NewStoreRepository creates a new instance of StoreRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStoreRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *StoreRepository {
	mock := &StoreRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
