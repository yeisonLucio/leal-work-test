// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	entities "lucio.com/order-service/src/domain/entities"
)

// BranchRepository is an autogenerated mock type for the BranchRepository type
type BranchRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: branch
func (_m *BranchRepository) Create(branch entities.Branch) (*entities.Branch, error) {
	ret := _m.Called(branch)

	var r0 *entities.Branch
	var r1 error
	if rf, ok := ret.Get(0).(func(entities.Branch) (*entities.Branch, error)); ok {
		return rf(branch)
	}
	if rf, ok := ret.Get(0).(func(entities.Branch) *entities.Branch); ok {
		r0 = rf(branch)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Branch)
		}
	}

	if rf, ok := ret.Get(1).(func(entities.Branch) error); ok {
		r1 = rf(branch)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByID provides a mock function with given fields: ID
func (_m *BranchRepository) FindByID(ID uint) *entities.Branch {
	ret := _m.Called(ID)

	var r0 *entities.Branch
	if rf, ok := ret.Get(0).(func(uint) *entities.Branch); ok {
		r0 = rf(ID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Branch)
		}
	}

	return r0
}

// GetIdsByStoreID provides a mock function with given fields: StoreID
func (_m *BranchRepository) GetIdsByStoreID(StoreID uint) []uint {
	ret := _m.Called(StoreID)

	var r0 []uint
	if rf, ok := ret.Get(0).(func(uint) []uint); ok {
		r0 = rf(StoreID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]uint)
		}
	}

	return r0
}

// NewBranchRepository creates a new instance of BranchRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBranchRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *BranchRepository {
	mock := &BranchRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
